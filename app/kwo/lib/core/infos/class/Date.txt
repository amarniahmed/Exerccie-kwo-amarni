/*
    [DATE_ATOM] => Y-m-d\TH:i:sP
    [DATE_COOKIE] => l, d-M-y H:i:s T
    [DATE_ISO8601] => Y-m-d\TH:i:sO
    [DATE_RFC822] => D, d M y H:i:s O
    [DATE_RFC850] => l, d-M-y H:i:s T
    [DATE_RFC1036] => D, d M y H:i:s O
    [DATE_RFC1123] => D, d M Y H:i:s O
    [DATE_RFC2822] => D, d M Y H:i:s O
    [DATE_RFC3339] => Y-m-d\TH:i:sP
    [DATE_RSS] => D, d M Y H:i:s O
    [DATE_W3C] => Y-m-d\TH:i:sP

*/

  public static function diffFullDay($from, $to=0) {
    if ($to===0) $to = time();
    else $to = self::toTime($to);
    $from = self::toTime($from);
    if ($from >= $to) return 0;
    $ret = floor(($to - $from) / (3600 * 24));
    return $ret;
  }

  public static function diffDay($from,$to=0) {
    if ($to===0) $to = self::now();
    $to = self::asHash($to);
    $from = self::asHash($from);
    $to = mktime(0, 0, 0,$to['month'],$to['day'],$to['year']);
    $from = mktime(0, 0, 0,$from['month'],$from['day'],$from['year']);
    if ($from >= $to) return 0;
    $from = floor($from / (3600 * 24));
    $to = floor($to / (3600 * 24));
    $ret = $to - $from;
    return $ret;
  }

  public static function month_name($num,$lang='fr',$format='long') {
    $num = (int) $num;
    return self::$month_arr[$lang][$format][$num];
  }

  public static function week2date($week, $year) {
    $weeknr = 0;
    $weekday = strtotime('last monday', mktime(0, 0, 0, 1, 1, $year));
    do {
      $weekday = strtotime('next monday', strtotime('+1 day', $weekday));
      $weeknr = date('W', $weekday);
    }
    while ($weeknr <> $week);
    return $weekday;
  }


  public static function formatTime($date,$lang='fr') {
    if ($date === '') return '';
    $hash = self::asHash($date);
    $ret = $hash['hour'].':'.$hash['min'];
    return $ret;
  }


  public static function monthQtyDay($year,$month) {
    $ret = (int) date('d', mktime(0,0,0,$month+1,0,$year));
    return $ret;
  }
  
  public static function weekDay($year, $month, $day) {
    return (int) date('N', mktime(0, 0, 0, $month, $day, $year));
  }